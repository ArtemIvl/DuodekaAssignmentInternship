{"ast":null,"code":"var _jsxFileName = \"/Users/artemivliev/Artem/Internship assignment Duodeka/todoapp/src/GlobalStateContextHooks.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useEffect, useCallback, useState } from \"react\";\nimport TodoList from './components/TodoList';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialGlobalState = {\n  count: 0\n};\n\n// Create a Context for the (global) State\nconst GlobalState = /*#__PURE__*/React.createContext();\nconst GlobalStateProvider = function (_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [state, setState] = useState(initialGlobalState !== null && initialGlobalState !== void 0 ? initialGlobalState : {});\n  const setGlobalState = useCallback(function () {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const newState = {\n      ...state\n    };\n\n    // Loop over the data items by key, only updating those which have changed\n    Object.keys(data).forEach(key => {\n      newState[key] = data[key];\n    });\n\n    // Update the state with the new State\n    setState(newState);\n  }, [state, setState]);\n  useEffect(() => {\n    GlobalState.set = setGlobalState;\n  }, [setGlobalState]);\n  return (\n    /*#__PURE__*/\n    // Pass the current value of GlobalState, based on this components' State, down\n    _jsxDEV(GlobalState.Provider, {\n      value: state,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n// Create a shorthand Hook for using the GlobalState\n_s(GlobalStateProvider, \"vsN1OYyNhdtEbC3EgeiArcWWJPg=\");\n_c = GlobalStateProvider;\nconst useGlobalState = () => {\n  _s2();\n  return React.useContext(GlobalState);\n};\n\n// Create an example component which both renders and modifies the GlobalState\n_s2(useGlobalState, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nfunction SomeComponent() {\n  _s3();\n  const {\n    count\n  } = useGlobalState();\n\n  // Create a function which mutates GlobalState\n  function incrementCount() {\n    GlobalState.set({\n      count: count + 1\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: incrementCount,\n    children: count\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 10\n  }, this);\n}\n_s3(SomeComponent, \"02SLJFtzEZ9vzDehoAWUNODzUJo=\", false, function () {\n  return [useGlobalState];\n});\n_c2 = SomeComponent;\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(GlobalStateProvider, {\n    children: /*#__PURE__*/_jsxDEV(TodoList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n// Expose the GlobalState object to the window (allowing GlobalState.set({ count: 'new' }) from anywhere in the code (even your console))\n_c3 = App;\nwindow.GlobalState = GlobalState;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"GlobalStateProvider\");\n$RefreshReg$(_c2, \"SomeComponent\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useEffect","useCallback","useState","TodoList","initialGlobalState","count","GlobalState","createContext","GlobalStateProvider","children","state","setState","setGlobalState","data","newState","Object","keys","forEach","key","set","useGlobalState","useContext","SomeComponent","incrementCount","App","window"],"sources":["/Users/artemivliev/Artem/Internship assignment Duodeka/todoapp/src/GlobalStateContextHooks.js"],"sourcesContent":["import React, { useEffect, useCallback, useState } from \"react\";\r\nimport TodoList from './components/TodoList';\r\nimport './App.css';\r\n\r\nconst initialGlobalState = {\r\n  count: 0\r\n};\r\n\r\n// Create a Context for the (global) State\r\nconst GlobalState = React.createContext();\r\n\r\nconst GlobalStateProvider = function ({ children }) {\r\n  const [state, setState] = useState(initialGlobalState ?? {});\r\n\r\n  const setGlobalState = useCallback(\r\n    (data = {}) => {\r\n      const newState = { ...state };\r\n\r\n      // Loop over the data items by key, only updating those which have changed\r\n      Object.keys(data).forEach((key) => {\r\n        newState[key] = data[key];\r\n      });\r\n\r\n      // Update the state with the new State\r\n      setState(newState);\r\n    },\r\n    [state, setState]\r\n  );\r\n\r\n  useEffect(() => {\r\n    GlobalState.set = setGlobalState;\r\n  }, [setGlobalState]);\r\n\r\n  return (\r\n    // Pass the current value of GlobalState, based on this components' State, down\r\n    <GlobalState.Provider value={state}>{children}</GlobalState.Provider>\r\n  );\r\n};\r\n\r\n// Create a shorthand Hook for using the GlobalState\r\nconst useGlobalState = () => React.useContext(GlobalState);\r\n\r\n// Create an example component which both renders and modifies the GlobalState\r\nfunction SomeComponent() {\r\n  const { count } = useGlobalState();\r\n\r\n  // Create a function which mutates GlobalState\r\n  function incrementCount() {\r\n    GlobalState.set({\r\n      count: count + 1\r\n    });\r\n  }\r\n\r\n  return <div onClick={incrementCount}>{count}</div>;\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <GlobalStateProvider>\r\n      <TodoList />\r\n    </GlobalStateProvider>\r\n  );\r\n}\r\n\r\n// Expose the GlobalState object to the window (allowing GlobalState.set({ count: 'new' }) from anywhere in the code (even your console))\r\nwindow.GlobalState = GlobalState;\r\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAC/D,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAO,WAAW;AAAC;AAEnB,MAAMC,kBAAkB,GAAG;EACzBC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,gBAAGP,KAAK,CAACQ,aAAa,EAAE;AAEzC,MAAMC,mBAAmB,GAAG,gBAAwB;EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC;EAChD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAACE,kBAAkB,aAAlBA,kBAAkB,cAAlBA,kBAAkB,GAAI,CAAC,CAAC,CAAC;EAE5D,MAAMQ,cAAc,GAAGX,WAAW,CAChC,YAAe;IAAA,IAAdY,IAAI,uEAAG,CAAC,CAAC;IACR,MAAMC,QAAQ,GAAG;MAAE,GAAGJ;IAAM,CAAC;;IAE7B;IACAK,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,CAACI,OAAO,CAAEC,GAAG,IAAK;MACjCJ,QAAQ,CAACI,GAAG,CAAC,GAAGL,IAAI,CAACK,GAAG,CAAC;IAC3B,CAAC,CAAC;;IAEF;IACAP,QAAQ,CAACG,QAAQ,CAAC;EACpB,CAAC,EACD,CAACJ,KAAK,EAAEC,QAAQ,CAAC,CAClB;EAEDX,SAAS,CAAC,MAAM;IACdM,WAAW,CAACa,GAAG,GAAGP,cAAc;EAClC,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC;EAEpB;IAAA;IACE;IACA,QAAC,WAAW,CAAC,QAAQ;MAAC,KAAK,EAAEF,KAAM;MAAA,UAAED;IAAQ;MAAA;MAAA;MAAA;IAAA;EAAwB;AAEzE,CAAC;;AAED;AAAA,GA5BMD,mBAAmB;AAAA,KAAnBA,mBAAmB;AA6BzB,MAAMY,cAAc,GAAG;EAAA;EAAA,OAAMrB,KAAK,CAACsB,UAAU,CAACf,WAAW,CAAC;AAAA;;AAE1D;AAAA,IAFMc,cAAc;AAGpB,SAASE,aAAa,GAAG;EAAA;EACvB,MAAM;IAAEjB;EAAM,CAAC,GAAGe,cAAc,EAAE;;EAElC;EACA,SAASG,cAAc,GAAG;IACxBjB,WAAW,CAACa,GAAG,CAAC;MACdd,KAAK,EAAEA,KAAK,GAAG;IACjB,CAAC,CAAC;EACJ;EAEA,oBAAO;IAAK,OAAO,EAAEkB,cAAe;IAAA,UAAElB;EAAK;IAAA;IAAA;IAAA;EAAA,QAAO;AACpD;AAAC,IAXQiB,aAAa;EAAA,QACFF,cAAc;AAAA;AAAA,MADzBE,aAAa;AAatB,eAAe,SAASE,GAAG,GAAG;EAC5B,oBACE,QAAC,mBAAmB;IAAA,uBAClB,QAAC,QAAQ;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QACQ;AAE1B;;AAEA;AAAA,MARwBA,GAAG;AAS3BC,MAAM,CAACnB,WAAW,GAAGA,WAAW;AAAC;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}