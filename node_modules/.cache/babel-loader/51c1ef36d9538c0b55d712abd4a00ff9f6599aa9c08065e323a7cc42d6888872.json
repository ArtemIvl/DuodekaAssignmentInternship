{"ast":null,"code":"var _jsxFileName = \"/Users/artemivliev/Artem/Internship assignment Duodeka/todoapp/src/components/TodoList.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport AllTodos from './AllTodos';\nimport App from '../App';\nimport './TodoList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialGlobalState = {\n  todos: [{\n    id: null,\n    title: null,\n    competed: false\n  }],\n  count: 1\n};\n\n// Create a Context for the (global) State\nconst GlobalState = /*#__PURE__*/React.createContext();\nconst GlobalStateProvider = function (_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [state, setState] = useState(initialGlobalState !== null && initialGlobalState !== void 0 ? initialGlobalState : {});\n  const setGlobalState = useCallback(function () {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const newState = {\n      ...state\n    };\n\n    // Loop over the data items by key, only updating those which have changed\n    Object.keys(data).forEach(key => {\n      newState[key] = data[key];\n    });\n\n    // Update the state with the new State\n    setState(newState);\n  }, [state, setState]);\n  useEffect(() => {\n    GlobalState.set = setGlobalState;\n  }, [setGlobalState]);\n  return (\n    /*#__PURE__*/\n    // Pass the current value of GlobalState, based on this components' State, down\n    _jsxDEV(GlobalState.Provider, {\n      value: state,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  );\n};\n\n// Create a shorthand Hook for using the GlobalState\n_s(GlobalStateProvider, \"vsN1OYyNhdtEbC3EgeiArcWWJPg=\");\n_c = GlobalStateProvider;\nconst useGlobalState = () => {\n  _s2();\n  return React.useContext(GlobalState);\n};\n_s2(useGlobalState, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nwindow.GlobalState = GlobalState;\nfunction TodoList() {\n  _s3();\n  const {\n    count\n  } = useGlobalState();\n  const [title, setTitle] = useState([]);\n  var id = 0;\n  const addTodo = () => {\n    // if (title || /^\\s*$/.test(title))\n    // {\n    //     return;\n    // }\n\n    GlobalState.set({\n      count: count + 1\n    });\n    setTitle('');\n  };\n  const deleteTodo = id => {\n    // const removeArray = [...todos].filter(todo => todo.id !== id)\n    // setTodos(removeArray);\n  };\n  const editTodo = (id, updatedValue) => {\n    if (!updatedValue.text || /^\\s*$/.test(updatedValue.text)) {\n      return;\n    }\n\n    //setTodos(prev => prev.map(item => (item.id === id ? updatedValue : item)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalStateProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: \"TodoApp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: title,\n        onChange: event => setTitle(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addTodo(),\n        children: \"Add Todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s3(TodoList, \"B1YR7/rKCXOWHuJadt/uMMJQ6B0=\", false, function () {\n  return [useGlobalState];\n});\n_c2 = TodoList;\nexport default TodoList;\nvar _c, _c2;\n$RefreshReg$(_c, \"GlobalStateProvider\");\n$RefreshReg$(_c2, \"TodoList\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","AllTodos","App","initialGlobalState","todos","id","title","competed","count","GlobalState","createContext","GlobalStateProvider","children","state","setState","setGlobalState","data","newState","Object","keys","forEach","key","set","useGlobalState","useContext","window","TodoList","setTitle","addTodo","deleteTodo","editTodo","updatedValue","text","test","event","target","value"],"sources":["/Users/artemivliev/Artem/Internship assignment Duodeka/todoapp/src/components/TodoList.js"],"sourcesContent":["import React, {useState, useEffect, useCallback} from 'react'\nimport AllTodos from './AllTodos';\nimport App from '../App';\nimport './TodoList.css'\n\nconst initialGlobalState = {\n    todos: [{\n      id: null, title: null, competed: false\n    }],\n    count: 1\n  };\n  \n  // Create a Context for the (global) State\n  const GlobalState = React.createContext();\n  \n  const GlobalStateProvider = function ({ children }) {\n    const [state, setState] = useState(initialGlobalState ?? {});\n  \n    const setGlobalState = useCallback(\n      (data = {}) => {\n        const newState = { ...state };\n  \n        // Loop over the data items by key, only updating those which have changed\n        Object.keys(data).forEach((key) => {\n          newState[key] = data[key];\n        });\n  \n        // Update the state with the new State\n        setState(newState);\n      },\n      [state, setState]\n    );\n  \n    useEffect(() => {\n      GlobalState.set = setGlobalState;\n    }, [setGlobalState]);\n  \n    return (\n      // Pass the current value of GlobalState, based on this components' State, down\n      <GlobalState.Provider value={state}>{children}</GlobalState.Provider>\n    );\n  };\n  \n  // Create a shorthand Hook for using the GlobalState\n  const useGlobalState = () => React.useContext(GlobalState);\n  window.GlobalState = GlobalState;\n\nfunction TodoList() {\n\nconst { count } = useGlobalState();\nconst [title, setTitle] = useState([]);\nvar id = 0;\n\nconst addTodo = () => {\n\n    // if (title || /^\\s*$/.test(title))\n    // {\n    //     return;\n    // }\n\n    GlobalState.set({\n        count: count + 1\n    });\n    setTitle(''); \n}\n\nconst deleteTodo = id => {\n   // const removeArray = [...todos].filter(todo => todo.id !== id)\n   // setTodos(removeArray);\n}\n\nconst editTodo = (id, updatedValue) => {\n    if (!updatedValue.text || /^\\s*$/.test(updatedValue.text))\n    {\n        return;\n    }\n\n    //setTodos(prev => prev.map(item => (item.id === id ? updatedValue : item)));\n}\n\n  return (\n    <GlobalStateProvider>\n    <div className='todo-list'>\n        <div className='header'>TodoApp</div>\n        <input\n        type='text'\n        value={title}\n        onChange={event => setTitle(event.target.value)}\n        />\n        <button onClick={() => addTodo()}>\n            Add Todo\n        </button>\n        <h1>{count}</h1>\n    </div>\n    </GlobalStateProvider>\n  )\n}\n\nexport default TodoList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}